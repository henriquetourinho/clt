#!/bin/bash

# /*********************************************************************************
# * Projeto:   CLT
# * Script:    clt.sh
# * Autor:     Carlos Henrique Tourinho Santana
# * Data:      13 de junho de 2025
# * GitHub:    https://github.com/henriquetourinho/clt
# *
# * Descri√ß√£o:
# * Vers√£o simplificada do CLT, focada exclusivamente em resolver a "pregui√ßa"
# * de configurar novos ambientes web. O script automatiza a cria√ß√£o de
# * diret√≥rios, a configura√ß√£o do Nginx + PHP e a cria√ß√£o do link no /etc/hosts
# * para acesso via .local.
# *********************************************************************************/

# --- CONFIGURA√á√ÉO INICIAL DO SCRIPT ---

# A diretiva 'set -e' (ou 'set -o errexit') garante que o script pare
# imediatamente se qualquer comando falhar (retornar um c√≥digo de sa√≠da diferente de 0).
# Isso √© crucial para evitar configura√ß√µes parciais ou estados de erro perigosos.
set -e

# --- SE√á√ÉO 1: PREPARA√á√ÉO E VARI√ÅVEIS ---

# Defini√ß√µes de c√≥digos de escape ANSI para cores.
# Isso melhora a legibilidade da sa√≠da no terminal, diferenciando erros,
# avisos e mensagens de sucesso.
C_RED='\033[0;31m'
C_GREEN='\033[0;32m'
C_YELLOW='\033[0;33m'
C_BLUE='\033[0;34m'
C_NC='\033[0m' # 'No Color' para resetar a formata√ß√£o de texto.

# --- VERIFICA√á√ïES DE SEGURAN√áA E USO ---

# 1. Verifica se o script est√° sendo executado como superusu√°rio (root).
# O ID do usu√°rio 'root' √© sempre 0. Comandos como 'mkdir' em /var/www,
# edi√ß√£o de arquivos em /etc e recarga de servi√ßos exigem privil√©gios de root.
if [ "$(id -u)" -ne 0 ]; then
  # Se o ID do usu√°rio n√£o for 0, exibe uma mensagem de erro e encerra.
  echo -e "${C_RED}‚ùå ERRO: Este script precisa ser executado com privil√©gios de root.${C_NC}"
  echo -e "   Por favor, tente novamente usando: sudo ./clt.sh nome-do-projeto"
  exit 1 # Encerra o script com um c√≥digo de erro 1 (falha).
fi

# 2. Verifica se o primeiro argumento (nome do projeto) foi fornecido.
# A vari√°vel '$1' representa o primeiro argumento passado para o script na linha de comando.
# A op√ß√£o '-z' testa se a string est√° vazia.
if [ -z "$1" ]; then
  # Se nenhum argumento for fornecido, informa o usu√°rio sobre o uso correto e encerra.
  echo -e "${C_RED}‚ùå ERRO: Voc√™ precisa fornecer o nome do projeto.${C_NC}"
  echo -e "   Uso: sudo ./clt.sh nome-do-projeto"
  exit 1
fi

# --- DEFINI√á√ÉO DE VARI√ÅVEIS DIN√ÇMICAS ---

# 2. Define as vari√°veis principais que ser√£o usadas ao longo do script.
# Sanitiza o nome do projeto para remover caracteres potencialmente perigosos.
# 'tr -cd' remove todos os caracteres EXCETO os que est√£o no conjunto especificado.
# '[:alnum:]' inclui todas as letras e n√∫meros. '_' e '-' s√£o permitidos.
PROJECT_NAME=$(echo "$1" | tr -cd '[:alnum:]_-')

# Define o caminho completo para o diret√≥rio raiz do projeto.
PROJECT_ROOT="/var/www/${PROJECT_NAME}"

# Define a URL local que ser√° usada para acessar o projeto.
PROJECT_URL="${PROJECT_NAME}.local"

# Define o caminho para o arquivo de configura√ß√£o do Nginx na pasta de sites dispon√≠veis.
NGINX_CONF_AVAILABLE="/etc/nginx/sites-available/${PROJECT_NAME}"

# Define o caminho para o link simb√≥lico na pasta de sites habilitados.
NGINX_CONF_ENABLED="/etc/nginx/sites-enabled/${PROJECT_NAME}"

# 3. Verifica se o projeto j√° existe para evitar sobrescrever configura√ß√µes.
# A op√ß√£o '-d' verifica se um diret√≥rio existe.
# A op√ß√£o '-f' verifica se um arquivo existe.
# O operador '||' significa 'OU'. Se qualquer uma das condi√ß√µes for verdadeira, o bloco √© executado.
if [ -d "${PROJECT_ROOT}" ] || [ -f "${NGINX_CONF_AVAILABLE}" ]; then
  echo -e "${C_YELLOW}‚ö†Ô∏è AVISO: O projeto '${PROJECT_NAME}' j√° existe.${C_NC}"
  echo "   Nenhuma a√ß√£o foi executada."
  exit 1 # Encerra sem erro, mas informando que nada foi feito.
fi

# --- SE√á√ÉO 2: EXECU√á√ÉO ---

# Informa ao usu√°rio que o processo de cria√ß√£o foi iniciado.
echo -e "${C_BLUE}üöÄ Contratando o CLT para criar o ambiente: ${PROJECT_URL}${C_NC}"

# ETAPA 1: CRIA√á√ÉO DO DIRET√ìRIO DE TRABALHO
echo -e "üìÇ [ETAPA 1/4] Criando diret√≥rio em ${C_YELLOW}${PROJECT_ROOT}${C_NC}..."

# 'mkdir -p' cria o diret√≥rio. A op√ß√£o '-p' garante que diret√≥rios pais
# sejam criados se n√£o existirem, evitando erros.
mkdir -p "${PROJECT_ROOT}"

# 'chown -R' muda o propriet√°rio do diret√≥rio. A op√ß√£o '-R' (recursiva)
# garante que todos os subdiret√≥rios e arquivos tamb√©m tenham o propriet√°rio alterado.
# 'www-data' √© o usu√°rio padr√£o que o Nginx e o PHP-FPM usam.
chown -R www-data:www-data "${PROJECT_ROOT}"

# 'chmod -R 755' altera as permiss√µes. '755' significa que o propriet√°rio
# (www-data) pode ler, escrever e executar, enquanto o grupo e outros
# usu√°rios podem apenas ler e executar. √â uma permiss√£o padr√£o e segura para web.
chmod -R 755 "${PROJECT_ROOT}"
echo -e "   Diret√≥rio criado."

# ETAPA 2: CRIA√á√ÉO DA CONFIGURA√á√ÉO DO NGINX
echo -e "‚öôÔ∏è  [ETAPA 2/4] Gerando configura√ß√£o do Nginx..."

# Encontra dinamicamente o caminho para o socket do PHP-FPM.
# O socket √© o arquivo que o Nginx usa para se comunicar com o PHP.
# O 'find' procura por um arquivo com nome 'php*-fpm.sock' em /run/php/.
# 'head -n 1' pega apenas o primeiro resultado, caso haja m√∫ltiplos.
PHP_SOCKET_PATH=$(find /run/php/ -name "php*-fpm.sock" | head -n 1)

# Verifica se o socket foi encontrado. Se n√£o, o PHP-FPM pode n√£o estar instalado.
if [ -z "${PHP_SOCKET_PATH}" ]; then
    echo -e "${C_RED}‚ùå ERRO: Nenhum socket PHP-FPM encontrado em /run/php/. Verifique se o PHP-FPM est√° instalado.${C_NC}"
    exit 1
fi

# Usa um 'Heredoc' (cat <<EOF) para criar o conte√∫do do arquivo de configura√ß√£o do Nginx.
# Tudo entre '<<EOF' e a linha 'EOF' final √© inserido no arquivo especificado.
cat > "${NGINX_CONF_AVAILABLE}" <<EOF
server {
    # Escuta na porta 80 para tr√°fego IPv4 e IPv6.
    listen 80;
    listen [::]:80;

    # Define a pasta raiz para este site.
    root ${PROJECT_ROOT};
    # Define os nomes de dom√≠nio que este bloco de servidor ir√° responder.
    server_name ${PROJECT_URL};

    # Define a ordem de arquivos a serem procurados como p√°gina inicial.
    index index.php index.html;

    # Configura√ß√£o de roteamento principal.
    # Tenta encontrar o arquivo solicitado. Se n√£o encontrar, tenta ver se √© um diret√≥rio.
    # Se falhar, redireciona a requisi√ß√£o para /index.php, permitindo "URLs amig√°veis".
    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }

    # Bloco que processa arquivos PHP.
    # A express√£o regular '~ \.php$' captura qualquer requisi√ß√£o que termine com .php.
    location ~ \.php$ {
        # Inclui um arquivo de configura√ß√£o padr√£o para FastCGI.
        include snippets/fastcgi-php.conf;
        # Passa a requisi√ß√£o para o socket do PHP-FPM que foi encontrado dinamicamente.
        fastcgi_pass unix:${PHP_SOCKET_PATH};
    }

    # Bloco de seguran√ßa para negar o acesso a arquivos .htaccess, que s√£o
    # usados pelo servidor Apache e n√£o devem ser expostos pelo Nginx.
    location ~ /\.ht {
        deny all;
    }
}
EOF
echo -e "   Configura√ß√£o gerada."

# ETAPA 3: HABILITA√á√ÉO DO SITE E ATUALIZA√á√ÉO DO HOSTS
echo -e "üîó [ETAPA 3/4] Habilitando site e atualizando /etc/hosts..."

# 'ln -s' cria um link simb√≥lico. O Nginx l√™ os arquivos em 'sites-enabled'.
# Criar um link do arquivo de 'sites-available' √© a pr√°tica padr√£o para habilitar um site.
ln -s "${NGINX_CONF_AVAILABLE}" "${NGINX_CONF_ENABLED}"

# Adiciona a entrada do host local no arquivo /etc/hosts, que o sistema operacional
# usa para resolver nomes de dom√≠nio localmente.
# 'grep -q' executa uma busca silenciosa ('-q'). O '!' inverte o resultado.
# O comando l√™-se: "Se a linha '127.0.0.1 projeto.local' N√ÉO for encontrada...".
if ! grep -q "127.0.0.1 ${PROJECT_URL}" /etc/hosts; then
    # '>>' anexa a linha ao final do arquivo.
    echo "127.0.0.1 ${PROJECT_URL}" >> /etc/hosts
fi
echo -e "   Site habilitado e hosts atualizado."

# ETAPA 4: TESTE E RECARGA DO NGINX
echo -e "üîÑ [ETAPA 4/4] Validando e recarregando o Nginx..."

# 'nginx -t' testa a sintaxe de todos os arquivos de configura√ß√£o do Nginx.
# Se houver um erro, o 'set -e' no in√≠cio do script ir√° par√°-lo aqui.
nginx -t

# 'systemctl reload nginx' recarrega a configura√ß√£o do Nginx sem derrubar
# as conex√µes existentes. √â mais seguro que um 'restart'.
systemctl reload nginx
echo -e "   Nginx recarregado com sucesso."

# --- SE√á√ÉO 3: MENSAGEM FINAL ---

# Exibe uma mensagem final amig√°vel com as informa√ß√µes de acesso.
echo ""
echo -e "${C_GREEN}===================================================================${C_NC}"
echo -e "${C_GREEN}‚úÖ  S U C E S S O ! O ambiente '${PROJECT_NAME}' foi consolidado.${C_NC}"
echo -e "${C_GREEN}===================================================================${C_NC}"
echo ""
echo -e "${C_BLUE}-- Acesso ao Projeto --${C_NC}"
echo -e "   URL Local:   ${C_YELLOW}http://${PROJECT_URL}${C_NC}"
echo -e "   Diret√≥rio:   ${PROJECT_ROOT}"
echo ""
echo -e "CLT cumpriu o seu papel. Pode come√ßar a trabalhar!"
echo -e "${C_GREEN}===================================================================${C_NC}"
echo ""
